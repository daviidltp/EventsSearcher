---

interface Props {
  route?: Array<[number, number]>;
  points?: Array<{
    position: [number, number],
    title: string,
    description?: string
  }>;
  title?: string;
}

const { 
  route = [], 
  points = [], 
  title = "Martos - Semana Santa" 
} = Astro.props;

const { procesionId = 'borriquita' } = Astro.params as { procesionId: string };

// Centro de Martos
const MARTOS_CENTER = [37.7219, -3.9699];

// Convertimos los datos a JSON para pasarlos al cliente
const routeJSON = JSON.stringify(route);
const pointsJSON = JSON.stringify(points);

---

<div class="map-container w-full h-full relative">
  <div id="map" class="absolute inset-0 z-10"></div>
  
  <!-- UI overlay - Título adaptativo -->
  <div class="title-container">
    <h2 class="title-text">{title}</h2>
  </div>
  
  <!-- Bottom Sheet para la calle actual y botones -->
  <!-- <div id="street-info-container" class="bottom-sheet-container">
    <!-- Indicador de arrastre (puramente decorativo) -->
    <!-- <div id="bottom-sheet-handle" class="drag-handle"> -->
		<!-- <div class="drag-indicator"></div> -->
	<!-- </div> -->
    
    <!-- Información de la calle -->
    <!-- <p id="current-street" class="current-street-text">Iniciando recorrido...</p> -->
    
    <!-- Contenedor de botones -->
    <!-- <div class="buttons-container"> -->
      <!-- Botón de volver (izquierda) -->
      <!-- <button id="back-btn" class="control-btn" title="Volver">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
      </button> -->
      
      <!-- Botón de play/pausa (centro) -->
      <!-- <button id="play-btn" class="control-btn" title="Iniciar/Pausar animación">
        <svg xmlns="http://www.w3.org/2000/svg" id="play-icon" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" id="pause-icon" class="h-7 w-7 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </button> -->
      
      <!-- Botón de ubicación actual (derecha) -->
      <!-- <button id="location-btn" class="control-btn" title="Mi ubicación">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      </button>
    </div> --> 
  </div> 

<!-- Importar CSS de Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />

<style>
	@import '../MartosMapa/styles/mapa.css';
</style>
<!-- Scripts necesarios -->
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script is:inline src="https://unpkg.com/leaflet-ant-path/dist/leaflet-ant-path.js"></script>

<script define:vars={{ routeJSON, pointsJSON, MARTOS_CENTER, procesionId}}>
  // Parsear datos JSON
  const route = JSON.parse(routeJSON);
  const points = JSON.parse(pointsJSON);

  import { initMap } from '../MartosMapa/scripts/mapInit.js';


  async function checkEstadoProcesion() {
  try {
    const response = await fetch(`https://owntracks-api.semanasantatracker.workers.dev/procesiones?id=${procesionId}`);
    const data = await response.json();

    if (Array.isArray(data) && data.length > 0 && data[0].estado === 'Directo') {
      addLastLocationMarker();  // si está en la calle, empieza la actualización en bucle.
    } else {
      console.log("Procesión no está en la calle actualmente.");
    }
  } catch (error) {
    console.error("Error al consultar estado de procesión:", error);
  }
}


  // Variables globales del mapa
  let map;
  let routeLayer;
  let completedRouteLayer;
  let animatedMarker;
  let isPaused = true;
  let animationId = null;
  let animationSpeed = 0.05; // Ajusta la velocidad de la animación
  let currentPosition = 0;
  let userLocationMarker = null;
  let isLocationActive = false;
  // Añade después de la declaración de variables existentes
	// let bottomSheetState = 'collapsed'; // Estados posibles: collapsed, expanded
	// let touchStartY = 0;
	// let touchCurrentY = 0;
	// let bottomSheetHeight = 0;
  
  // Inicializar cuando la página esté cargada
  window.onload = () => {
  initMap();
  checkEstadoProcesion();  // aquí llamas a la nueva función
};


  async function addLastLocationMarker() {
  try {
    // Obtener la última ubicación desde la API
    const response = await fetch("https://owntracks-api.semanasantatracker.workers.dev/last-location");
    const data = await response.json();
    const { lat, lon } = data;
    
    // Encontrar el punto de la ruta más cercano a la ubicación actual
    let closestPointIndex = 0;
    let minDistance = Infinity;
    
    for (let i = 0; i < route.length; i++) {
      const routePoint = route[i];
      // Calcular distancia entre la ubicación real y el punto de la ruta
      const distance = Math.sqrt(
        Math.pow(routePoint[0] - lat, 2) + 
        Math.pow(routePoint[1] - lon, 2)
      );
      
      if (distance < minDistance) {
        minDistance = distance;
        closestPointIndex = i;
      }
    }
    
    // Actualizar la posición del marcador del trono
    if (animatedMarker) {
      animatedMarker.setLatLng([lat, lon]);
    }
    
    // Actualizar la ruta completada (en dorado)
    currentPosition = closestPointIndex;
    const completedPath = route.slice(0, closestPointIndex + 1).concat([[lat, lon]]);
    if (completedRouteLayer) {
      completedRouteLayer.setLatLngs(completedPath);
    }
    
    // Centrar el mapa en la nueva posición
    if (map) {
      map.panTo([lat, lon]);
    }
    
    // Actualizar estado
    isPaused = true; // Para que la animación automática no interfiera
    
    // Programar la siguiente actualización
    setTimeout(addLastLocationMarker, 10000); // Actualizar cada 10 segundos
  } catch (err) {
    console.error("Error obteniendo la última ubicación:", err);
    setTimeout(addLastLocationMarker, 30000); // Reintentar tras error con más tiempo
  }
}

  
  // Función para iniciar/pausar la animación
  function toggleAnimation() {
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    
    isPaused = !isPaused;
    
    if (isPaused) {
      // Detener animación
      playIcon.classList.remove('hidden');
      pauseIcon.classList.add('hidden');
      cancelAnimationFrame(animationId);
    } else {
      // Iniciar animación
      playIcon.classList.add('hidden');
      pauseIcon.classList.remove('hidden');
      
      // Si ya llegó al final, reiniciar
      if (currentPosition >= route.length - 1) {
        currentPosition = 0;
        completedRouteLayer.setLatLngs([]);
      }
      
      animateRoute();
    }
  }
  
  // Función para animar la ruta
  function animateRoute() {
    if (isPaused) return;
    
    currentPosition += animationSpeed;
    
    if (currentPosition >= route.length - 1) {
      currentPosition = route.length - 1;
      isPaused = true;
      document.getElementById('play-icon').classList.remove('hidden');
      document.getElementById('pause-icon').classList.add('hidden');
    } else {
      animationId = requestAnimationFrame(animateRoute);
    }
    
    updatePosition(currentPosition);
    updateCurrentStreet(currentPosition);
  }
  
  // Función para actualizar la posición en la ruta
  function updatePosition(position) {
    // Verificar si hay datos válidos
    if (!map || !route || route.length < 2 || !completedRouteLayer || !animatedMarker) return;
    
    const currentIndex = Math.floor(position);
    const nextIndex = Math.min(currentIndex + 1, route.length - 1);
    const fraction = position - currentIndex;
    
    // Interpolar entre los dos puntos
    const lat = route[currentIndex][0] + fraction * (route[nextIndex][0] - route[currentIndex][0]);
    const lng = route[currentIndex][1] + fraction * (route[nextIndex][1] - route[currentIndex][1]);
    
    // Actualizar posición del marcador
    animatedMarker.setLatLng([lat, lng]);
    
    // Actualizar la línea recorrida
    const completedPath = route.slice(0, currentIndex + 1).concat([[lat, lng]]);
    completedRouteLayer.setLatLngs(completedPath);
    
    // Centrar en la posición actual
    map.panTo([lat, lng]);
  }
  
  // Función para actualizar el nombre de la calle actual
  function updateCurrentStreet(position) {
    const currentIndex = Math.floor(position);
    let streetName = "Recorrido procesional";
    
    // Buscar en qué segmento de calle estamos
    // for (const segment of streetSegments) {
    //   if (currentIndex >= segment.startIndex && currentIndex <= segment.endIndex) {
    //     streetName = segment.name;
    //     break;
    //   }
    // }
    
    // Actualizar el texto de la calle actual
    //document.getElementById('current-street').textContent = streetName;
  }
  
  // Función para crear iconos personalizados
  function createCustomIcon(color, title) {
    return L.divIcon({
      className: 'custom-marker',
      html: `<div style="background-color: ${color}; width: 14px; height: 14px; border-radius: 50%; border: 3px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.8);"></div>`,
      iconSize: [20, 20],
      iconAnchor: [10, 10],
      popupAnchor: [0, -10]
    });
  }
  
  // Función para crear iconos de iglesias y templos
function createIglesiaIcon(title) {
  // URL de la imagen 
  const imageUrl = '/assets/icons/iglesia.png';
  
  return L.divIcon({
    className: 'plaza-marker',
    html: `
      <div class="plaza-container">
        <img src="${imageUrl}" alt="${title}" style="width: 40px; height: 32px; />
        <div class="marker-title"></div>
      </div>
    `,
   /* iconSize: [2, 3],
    iconAnchor: [20, 48],
    popupAnchor: [0, -42]*/
  });
}

// Función para crear iconos de plazas
function createPlazaIcon(title) {
  // URL de la imagen 
  const imageUrl = '/assets/icons/fuente-nueva.png';
  
  return L.divIcon({
    className: 'plaza-marker',
    html: `
      <div class="plaza-container">
        <img src="${imageUrl}" alt="${title}" style="width: 40px; height: 32px; />
        <div class="marker-title"></div>
      </div>
    `,
   /* iconSize: [2, 3],
    iconAnchor: [20, 48],
    popupAnchor: [0, -42]*/
  });
}
  
</script>