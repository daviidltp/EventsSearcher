---
interface Props {
  route?: Array<[number, number]>;
  points?: Array<{
    position: [number, number],
    title: string,
    description?: string
  }>;
  title?: string;
}

const { 
  route = [], 
  points = [], 
  title = "Martos - Semana Santa" 
} = Astro.props;

// Centro de Martos
const MARTOS_CENTER = [37.7219, -3.9699];

// Convertimos los datos a JSON para pasarlos al cliente
const routeJSON = JSON.stringify(route);
const pointsJSON = JSON.stringify(points);
---

<div class="map-container w-full h-full relative">
  <div id="map" class="absolute inset-0 z-10"></div>
  
  <!-- UI overlay - Título adaptativo -->
  <div class="title-container">
	<h2 class="title-text">{title}</h2>
  </div>
  
  <!-- Control de porcentaje -->
  <div class="absolute bottom-20 left-1/2 transform -translate-x-1/2 bg-white/80 rounded-lg p-3 z-20 shadow-lg flex flex-col items-center w-11/12 max-w-md mx-auto">
    <p class="text-sm font-semibold mb-2">Progreso de la procesión</p>
    <div class="flex items-center w-full">
      <input type="range" id="progress-slider" min="0" max="100" value="0" class="w-full accent-blue-600">
      <span id="percentage-display" class="ml-2 text-sm font-bold">0%</span>
    </div>
  </div>
  
  <!-- Controles - Botones abajo a la derecha -->
  <div class="absolute bottom-8 right-4 z-30 flex flex-col gap-3">
    <!-- Botón de ubicación actual (primera posición) -->
    <button id="location-btn" class="p-3 bg-white rounded-full shadow-lg hover:bg-blue-50 active:bg-blue-100 transition-colors" title="Mi ubicación">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
        <path stroke-linecap="round" stroke-linejoin="round" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
        <path stroke-linecap="round" stroke-linejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
      </svg>
    </button>
    
    <!-- Botón de volver (segunda posición) -->
    <button id="back-btn" class="p-3 bg-white rounded-full shadow-lg hover:bg-blue-50 active:bg-blue-100 transition-colors" title="Volver">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
        <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
    </button>
  </div>

<!-- Importar CSS de Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />

<!-- Scripts necesarios -->
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script is:inline src="https://unpkg.com/leaflet-ant-path/dist/leaflet-ant-path.js"></script>

<script define:vars={{ routeJSON, pointsJSON, MARTOS_CENTER }}>
  // Parsear datos JSON
  const route = JSON.parse(routeJSON);
  const points = JSON.parse(pointsJSON);
  
  // Variables globales del mapa
  let map;
  let routeLayer;
  let completedRouteLayer;
  let animatedMarker;
  let isPaused = true;
  let animationId = null;
  let percentageComplete = 0;
  let userLocationMarker = null;
  let isLocationActive = false;
  
  // Inicializar cuando la página esté cargada
  window.onload = initMap;
  
  function initMap() {
    // Verificar si hay datos de ruta
    if (!route || route.length < 2) {
      console.error("No se proporcionó una ruta válida");
      return;
    }

    // Registrar información de los datos para depuración
    console.log(`Ruta cargada: ${route.length} puntos`);
    console.log(`Puntos de interés: ${points.length} marcadores`);
    
    try {
      // Crear mapa base con Leaflet
      	map = L.map('map', {
		center: MARTOS_CENTER,
		zoom: 16,
		minZoom: 14,
		maxZoom: 19,
		attributionControl: false  // Esto desactiva el panel de atribución
	});
      
      // Añadir capa base de imágenes satelitales
      L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: '',
        maxZoom: 19
      }).addTo(map);
      
      // Añadir capa de etiquetas para que los nombres de calles sean visibles
      L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}{r}.png', {
        attribution: '',
        subdomains: 'abcd',
        minZoom: 13,
        maxZoom: 19,
        opacity: 0.7
      }).addTo(map);
      
      // Capa para la ruta completa con efecto "ant path"
      routeLayer = L.polyline.antPath(route, {
        color: '#3388ff',
        weight: 5,
        opacity: 0.8,
        delay: 2500,
        dashArray: [10, 20],
        pulseColor: '#FFFFFF',
        paused: false,
        hardwareAccelerated: true
      }).addTo(map);
      
      // Capa para la parte de la ruta ya recorrida (dorada)
      completedRouteLayer = L.polyline([], {
        color: 'gold',
        weight: 6,
        opacity: 0.9,
        className: 'route-glow'
      }).addTo(map);
      
      // Centrar el mapa en la ruta
      map.fitBounds(routeLayer.getBounds(), { padding: [30, 30] });
      
      // Crear el icono del paso procesional
      const pasoColoridoSVG = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 120" width="60" height="72">
          <!-- Base dorada y estructura del trono -->
          <rect x="15" y="90" width="70" height="12" fill="#B8860B" stroke="#8B4513" stroke-width="1"/>
          <rect x="20" y="85" width="60" height="5" fill="#DAA520" stroke="#B8860B" stroke-width="0.5"/>
          
          <!-- Patas ornamentadas -->
          <rect x="20" y="90" width="5" height="12" fill="#8B4513" stroke="#5D2906" stroke-width="0.5" rx="1"/>
          <rect x="75" y="90" width="5" height="12" fill="#8B4513" stroke="#5D2906" stroke-width="0.5" rx="1"/>
          
          <!-- Nivel medio del trono con terciopelo -->
          <rect x="22" y="70" width="56" height="15" fill="#800020" stroke="#4B0010" stroke-width="1"/>
          <!-- Bordes dorados -->
          <rect x="20" y="70" width="60" height="2" fill="#DAA520" stroke="#B8860B" stroke-width="0.5"/>
          <rect x="20" y="83" width="60" height="2" fill="#DAA520" stroke="#B8860B" stroke-width="0.5"/>
          
          <!-- Cruz principal -->
          <rect x="48" y="20" width="4" height="50" fill="#8B4513" stroke="#5D2906" stroke-width="1"/>
          <rect x="35" y="30" width="30" height="4" fill="#8B4513" stroke="#5D2906" stroke-width="1"/>
          
          <!-- Cristo en la cruz (simplificado pero reconocible) -->
          <path d="M50,30 Q48,35 45,40 L50,40 L55,40 Q52,35 50,30" fill="#FFE4C4" stroke="#8B4513" stroke-width="0.5"/>
          <path d="M45,40 L41,55 M55,40 L59,55" stroke="#FFE4C4" stroke-width="2" stroke-linecap="round"/>
          <circle cx="50" cy="27" r="3" fill="#FFE4C4" stroke="#8B4513" stroke-width="0.5"/> <!-- Cabeza -->
          
          <!-- Corona de espinas -->
          <path d="M47,25 Q50,22 53,25" stroke="#8B4513" stroke-width="0.5" fill="none"/>
          
          <!-- Candelabros y velas a los lados -->
          <!-- Izquierdo -->
          <rect x="25" y="60" width="2" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="24.5" y="50" width="3" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="25" y="45" width="2" height="5" fill="#FFF8DC" stroke="#DCDCDC" stroke-width="0.2"/>
          <circle cx="26" cy="44" r="1" fill="#FFFF00" class="light-pulse" opacity="0.9"/>
          
          <!-- Derecho -->
          <rect x="73" y="60" width="2" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="72.5" y="50" width="3" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="73" y="45" width="2" height="5" fill="#FFF8DC" stroke="#DCDCDC" stroke-width="0.2"/>
          <circle cx="74" cy="44" r="1" fill="#FFFF00" class="light-pulse" opacity="0.9"/>
          
          <!-- Decoraciones florales -->
          <!-- Centro -->
          <ellipse cx="50" cy="65" rx="10" ry="4" fill="#800020" opacity="0.7"/>
          <circle cx="46" cy="64" r="2" fill="#FF0000" opacity="0.9"/>
          <circle cx="50" cy="63" r="2" fill="#FFFFFF" opacity="0.9"/>
          <circle cx="54" cy="64" r="2" fill="#FF0000" opacity="0.9"/>
          
          <!-- Laterales -->
          <!-- Izquierda -->
          <circle cx="32" cy="70" r="3" fill="#A020F0" opacity="0.8"/>
          <circle cx="35" cy="72" r="2.5" fill="#FFFFFF" opacity="0.8"/>
          <circle cx="31" cy="74" r="2" fill="#FF4500" opacity="0.8"/>
          
          <!-- Derecha -->
          <circle cx="68" cy="70" r="3" fill="#A020F0" opacity="0.8"/>
          <circle cx="65" cy="72" r="2.5" fill="#FFFFFF" opacity="0.8"/>
          <circle cx="69" cy="74" r="2" fill="#FF4500" opacity="0.8"/>
          
          <!-- Luces ambientales -->
          <circle cx="25" cy="65" r="2" fill="#FFFF00" opacity="0.3" class="ambient-light"/>
          <circle cx="75" cy="65" r="2" fill="#FFFF00" opacity="0.3" class="ambient-light"/>
          <circle cx="50" cy="58" r="3" fill="#FFFF00" opacity="0.2" class="ambient-light"/>
        </svg>
      `;
      
      // Crear el div icon con el SVG animado
      const tronoIcon = L.divIcon({
        className: 'custom-paso-marker',
        html: `
          <div class="paso-container">
            ${pasoColoridoSVG}
            <div class="paso-shadow"></div>
          </div>
        `,
        iconSize: [60, 72],
        iconAnchor: [30, 45],
        zIndexOffset: 1000
      });
      
      // Crear el marcador en la posición inicial
      animatedMarker = L.marker(route[0], { 
        icon: tronoIcon,
        zIndexOffset: 1000
      }).addTo(map);
      
      // Añadir marcadores de inicio y fin
      L.marker(route[0], {
        icon: createCustomIcon('green', 'Inicio')
      }).addTo(map).bindPopup('<strong>Punto de Inicio</strong>');
      
      L.marker(route[route.length - 1], {
        icon: createCustomIcon('red', 'Fin') 
      }).addTo(map).bindPopup('<strong>Punto Final</strong>');
      
      // Añadir puntos de interés
      if (points && points.length > 0) {
        points.forEach(point => {
          L.marker(point.position, {
            icon: createIglesiaIcon(point.title)
          }).addTo(map).bindPopup(`
            <strong>${point.title}</strong>
            ${point.description ? `<br>${point.description}` : ''}
          `);
        });
      }
      
      // Configurar eventos para los botones
      document.getElementById('location-btn').addEventListener('click', handleLocationRequest);
      document.getElementById('back-btn').addEventListener('click', () => window.history.back());
      
      // Configurar el control de porcentaje
      const slider = document.getElementById('progress-slider');
      const percentageDisplay = document.getElementById('percentage-display');
      
      slider.addEventListener('input', function(e) {
        percentageComplete = parseInt(e.target.value);
        percentageDisplay.textContent = `${percentageComplete}%`;
        
        // Actualizar la visualización según el porcentaje
        updateRouteByPercentage(percentageComplete);
      });
      
      // Inicializar la visualización con 0%
      updateRouteByPercentage(0);
      
    } catch (error) {
      console.error("Error al inicializar el mapa:", error);
    }
  }
  
  // Función para actualizar la visualización según un porcentaje
  function updateRouteByPercentage(percentage) {
    // Verificar si hay datos válidos
    if (!map || !route || route.length < 2 || !completedRouteLayer || !animatedMarker) return;
    
    // Convertir porcentaje a posición en la ruta
    const totalLength = route.length - 1;
    const targetPosition = (percentage / 100) * totalLength;
    
    // Calcular el índice actual y el siguiente
    const currentIndex = Math.floor(targetPosition);
    const nextIndex = Math.min(currentIndex + 1, route.length - 1);
    const fraction = targetPosition - currentIndex;
    
    // Si el porcentaje es 0, reiniciar
    if (percentage === 0) {
      completedRouteLayer.setLatLngs([]);
      animatedMarker.setLatLng(route[0]);
      return;
    }
    
    // Si el porcentaje es 100, completar toda la ruta
    if (percentage === 100) {
      completedRouteLayer.setLatLngs(route);
      animatedMarker.setLatLng(route[route.length - 1]);
      return;
    }
    
    // Para porcentajes intermedios, interpolar entre puntos
    const currentPoint = route[currentIndex];
    const nextPoint = route[nextIndex];
    
    // Interpolar entre los dos puntos
    const lat = currentPoint[0] + fraction * (nextPoint[0] - currentPoint[0]);
    const lng = currentPoint[1] + fraction * (nextPoint[1] - currentPoint[1]);
    
    // Actualizar posición del marcador
    animatedMarker.setLatLng([lat, lng]);
    
    // Actualizar la línea recorrida
    const completedPath = route.slice(0, currentIndex + 1).concat([[lat, lng]]);
    completedRouteLayer.setLatLngs(completedPath);
    
    // Centrar en la posición actual
    map.panTo([lat, lng]);
  }
  
  // Función para crear iconos personalizados
  function createCustomIcon(color, title) {
    return L.divIcon({
      className: 'custom-marker',
      html: `<div style="background-color: ${color}; width: 14px; height: 14px; border-radius: 50%; border: 3px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.8);"></div>`,
      iconSize: [20, 20],
      iconAnchor: [10, 10],
      popupAnchor: [0, -10]
    });
  }
  
  // Función para crear iconos de iglesias y templos
  function createIglesiaIcon(title) {
    // SVG de una iglesia/templo
    const iglesiaSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30" height="30" fill="#f0f0f0" stroke="#333333" stroke-width="0.5">
        <!-- Base de la iglesia -->
        <rect x="5" y="14" width="14" height="10" />
        
        <!-- Torre principal -->
        <rect x="9" y="7" width="6" height="7" />
        <polygon points="9,7 15,7 12,2" />
        
        <!-- Cruz -->
        <path d="M12,1 L12,4 M10.5,2.5 L13.5,2.5" stroke="#E6C700" stroke-width="0.7" />
        
        <!-- Puerta -->
        <rect x="10" y="18" width="4" height="6" fill="#8B4513" />
        
        <!-- Ventana -->
        <circle cx="12" cy="11" r="1.5" fill="#2986cc" />
      </svg>
    `;
    
    // Crear el div icon con el SVG
    return L.divIcon({
      className: 'iglesia-marker',
      html: `
        <div class="iglesia-container">
          ${iglesiaSVG}
          <div class="marker-title">${title}</div>
        </div>
      `,
      iconSize: [30, 30],
      iconAnchor: [15, 30],
      popupAnchor: [0, -30]
    });
  }
  
  // Función para mostrar la ubicación del usuario
  function handleLocationRequest() {
    if (!map) return;
    
    if (!isLocationActive) {
      // Activar
      if ("geolocation" in navigator) {
        // Cambiar estilo del botón para indicar activación
        document.getElementById('location-btn').classList.add('bg-blue-500');
        document.getElementById('location-btn').classList.add('text-white');
        
        // Intentar obtener ubicación
        navigator.geolocation.getCurrentPosition(
          // Éxito
          function(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;
            
            // Crear icono de ubicación si no existe
            if (!userLocationMarker) {
              // Crear icono personalizado para la ubicación
              const userIcon = L.divIcon({
                className: 'user-location-marker',
                html: `
                  <div class="user-dot">
                    <div class="user-pulse"></div>
                  </div>
                `,
                iconSize: [24, 24],
                iconAnchor: [12, 12]
              });
              
              userLocationMarker = L.marker([userLat, userLng], {
                icon: userIcon,
                zIndexOffset: 2000
              }).addTo(map);
              
              // Añadir popup
              userLocationMarker.bindPopup('¡Estás aquí!').openPopup();
            } else {
              // Actualizar posición
              userLocationMarker.setLatLng([userLat, userLng]);
              userLocationMarker.openPopup();
            }
            
            // Centrar mapa en la ubicación
            map.flyTo([userLat, userLng], 17);
            isLocationActive = true;
          },
          // Error
          function(error) {
            let errorMsg;
            switch(error.code) {
              case error.PERMISSION_DENIED:
                errorMsg = "Necesitas permitir el acceso a tu ubicación para usar esta función.";
                break;
              case error.POSITION_UNAVAILABLE:
                errorMsg = "No se puede determinar tu ubicación actual.";
                break;
              case error.TIMEOUT:
                errorMsg = "Se agotó el tiempo para obtener tu ubicación.";
                break;
              default:
                errorMsg = "Ocurrió un error al intentar obtener tu ubicación.";
            }
            
            alert(errorMsg);
            
            // Restaurar estilo del botón
            document.getElementById('location-btn').classList.remove('bg-blue-500');
            document.getElementById('location-btn').classList.remove('text-white');
          },
          // Opciones
          {
            enableHighAccuracy: true,
            timeout: 5000,
            maximumAge: 0
          }
        );
      } else {
        alert("Tu navegador no soporta geolocalización");
      }
    } else {
      // Desactivar
      if (userLocationMarker) {
        userLocationMarker.closePopup();
        map.removeLayer(userLocationMarker);
        userLocationMarker = null;
      }
      
      document.getElementById('location-btn').classList.remove('bg-blue-500');
      document.getElementById('location-btn').classList.remove('text-white');
      isLocationActive = false;
    }
  }
</script>

<style>
  /* Estilos para asegurar que el mapa ocupe toda la pantalla */
  :global(body), :global(html) {
    margin: 0;
    padding: 0;
    height: 100%;
    overflow: hidden;
  }
  
  /* Personalizar los popups */
  :global(.leaflet-popup-content-wrapper) {
    border-radius: 8px;
  }
  
  :global(.leaflet-popup-content) {
    margin: 12px;
  }
  
  /* Estilos para el paso procesional */
  :global(.paso-container) {
    position: relative;
    animation: paso-motion 1.5s infinite alternate ease-in-out;
    z-index: 1000;
    transform: translateY(-20px);
  }
  
  :global(.paso-shadow) {
    position: absolute;
    bottom: -4px;
    left: 25%;
    width: 50%;
    height: 6px;
    background: rgba(0,0,0,0.3);
    border-radius: 50%;
    z-index: -1;
  }
  
  /* Animación del movimiento lateral del paso */
  @keyframes paso-motion {
    0% { transform: translate(-2px, -20px) rotate(-1deg); }
    50% { transform: translate(0, -21px); }
    100% { transform: translate(2px, -20px) rotate(1deg); }
  }
  
  /* Animación de las luces del paso */
  :global(.light-pulse) {
    animation: light-pulse 2s infinite alternate;
  }
  
  @keyframes light-pulse {
    0% { opacity: 0.4; r: 1.8; }
    50% { opacity: 0.8; r: 2.2; }
    100% { opacity: 1; r: 2.5; }
  }
  
  /* Animación para las luces ambientales */
  :global(.ambient-light) {
    animation: glow 3s infinite alternate ease-in-out;
  }

  @keyframes glow {
    0% { opacity: 0.2; r: 2; }
    100% { opacity: 0.4; r: 2.5; }
  }
  
  /* Efecto de brillo para la ruta */
  :global(.route-glow) {
    filter: drop-shadow(0 0 3px gold);
  }

  /* Estilos para los iconos de iglesias */
  :global(.iglesia-container) {
    position: relative;
    filter: drop-shadow(0 1px 3px rgba(0,0,0,0.5));
  }

  :global(.marker-title) {
    position: absolute;
    bottom: -15px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    background-color: rgba(0,0,0,0.6);
    color: white;
    font-size: 10px;
    padding: 2px 4px;
    border-radius: 2px;
    visibility: hidden;
  }

  :global(.iglesia-container:hover .marker-title) {
    visibility: visible;
  }
  
  /* Mejoras para botones en móvil y ordenador */
  :global(.leaflet-control-zoom) {
    margin-bottom: 80px !important; /* Para evitar solapamiento con los controles de reproducción */
  }

  @media (max-width: 640px) {
	:global(.leaflet-control-zoom) {
		margin-bottom: 100px !important;
		display: none !important; /* Ocultar controles de zoom en móvil */
  }
    
    :global(.leaflet-control-attribution) {
		display: none !important;
    }
  }

  /* Asegurar que los SVG en los botones sean visibles */
  :global(button svg) {
    stroke: black;
    display: block;
  }

  :global(button:hover svg) {
    stroke: black;
  }

  :global(button:active svg) {
    stroke: black;
  }

  /* Estilos para el marcador de ubicación del usuario */
  :global(.user-location-marker) {
    background: transparent;
    border: none;
  }

  :global(.user-dot) {
    position: relative;
    width: 24px;
    height: 24px;
  }

  :global(.user-dot::before) {
    content: '';
    position: absolute;
    top: 8px;
    left: 8px;
    width: 8px;
    height: 8px;
    background-color: #3b82f6;
    border-radius: 50%;
    box-shadow: 0 0 0 2px white;
    z-index: 10;
  }

  :global(.user-pulse) {
    position: absolute;
    top: 0;
    left: 0;
    width: 24px;
    height: 24px;
    background-color: rgba(59, 130, 246, 0.4);
    border-radius: 50%;
    opacity: 1;
    animation: pulse 2s infinite ease-out;
  }

  @keyframes pulse {
    0% {
      transform: scale(0.5);
      opacity: 1;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }

  /* Mejora del contraste para botones activos */
  :global(.bg-blue-500) {
    background-color: #3b82f6 !important;
  }

  :global(.text-white) {
    color: white !important;
  }

  :global(.bg-blue-500 svg) {
    stroke: white !important;
  }

  /* Estilos mejorados para el título */
.title-container {
  position: absolute;
  z-index: 20;
  padding: 0.75rem 1rem;
  background: linear-gradient(to right, rgba(0,0,0,0.7), rgba(0,0,0,0.8));
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  top: 1rem;
  right: 1rem;
  max-width: 80%;
  backdrop-filter: blur(2px);
  border-left: 3px solid black;
  transition: all 0.3s ease;
}

.title-text {
  font-size: 1.25rem;
  font-weight: bold;
  color: white;
  margin: 0;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Adaptar título en dispositivos móviles */
@media (max-width: 640px) {
  .title-container {
    left: 50%;
    right: auto;
    transform: translateX(-50%);
    text-align: center;
    width: 90%;
    max-width: 90%;
    background: rgba(0,0,0,0.75);
    padding: 0.5rem 0.75rem;
    border-left: none;
    border-bottom: 2px solid black;
  }
  
  .title-text {
    font-size: 1.1rem;
    white-space: normal;
    line-height: 1.3;
  }
}
</style>