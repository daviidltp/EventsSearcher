---
interface Props {
  route?: Array<[number, number]>;
  points?: Array<{
    position: [number, number],
    title: string,
    description?: string
  }>;
  title?: string;
}

const { 
  route = [], 
  points = [], 
  title = "Martos - Semana Santa" 
} = Astro.props;

// Centro de Martos
const MARTOS_CENTER = [37.7219, -3.9699];

// Convertimos los datos a JSON para pasarlos al cliente
const routeJSON = JSON.stringify(route);
const pointsJSON = JSON.stringify(points);
---

<div class="map-container w-full h-full relative">
  <div id="map" class="absolute inset-0 z-10"></div>
  
  <!-- UI overlay - Título adaptativo -->
  <div class="title-container">
    <h2 class="title-text">{title}</h2>
  </div>
  
  <!-- Bottom Sheet para la calle actual y botones -->
  <div id="street-info-container" class="bottom-sheet-container">
    <!-- Indicador de arrastre (puramente decorativo) -->
    <div class="drag-handle">
      <div class="drag-indicator"></div>
    </div>
    
    <!-- Información de la calle -->
    <p id="current-street" class="current-street-text">Iniciando recorrido...</p>
    
    <!-- Contenedor de botones -->
    <div class="buttons-container">
      <!-- Botón de volver (izquierda) -->
      <button id="back-btn" class="control-btn" title="Volver">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
      </button>
      
      <!-- Botón de play/pausa (centro) -->
      <button id="play-btn" class="control-btn" title="Iniciar/Pausar animación">
        <svg xmlns="http://www.w3.org/2000/svg" id="play-icon" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" id="pause-icon" class="h-7 w-7 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </button>
      
      <!-- Botón de ubicación actual (derecha) -->
      <button id="location-btn" class="control-btn" title="Mi ubicación">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      </button>
    </div>
  </div>

<!-- Importar CSS de Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />

<!-- Scripts necesarios -->
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script is:inline src="https://unpkg.com/leaflet-ant-path/dist/leaflet-ant-path.js"></script>

<script define:vars={{ routeJSON, pointsJSON, MARTOS_CENTER }}>
  // Parsear datos JSON
  const route = JSON.parse(routeJSON);
  const points = JSON.parse(pointsJSON);
  
  // Variables globales del mapa
  let map;
  let routeLayer;
  let completedRouteLayer;
  let animatedMarker;
  let isPaused = true;
  let animationId = null;
  let animationSpeed = 0.05; // Ajusta la velocidad de la animación
  let currentPosition = 0;
  let userLocationMarker = null;
  let isLocationActive = false;
  // Añade después de la declaración de variables existentes
	let bottomSheetState = 'collapsed'; // Estados posibles: collapsed, expanded
	let touchStartY = 0;
	let touchCurrentY = 0;
	let bottomSheetHeight = 0;
  
  // Inicializar cuando la página esté cargada
  window.onload = initMap;
  
  // Datos de mapeo de calles - Define segmentos de la ruta y sus nombres de calles
  // Esto es un ejemplo y deberá ser adaptado a cada ruta específica
  const streetSegments = [
    { startIndex: 0, endIndex: 5, name: "Plaza de la Constitución" },
    { startIndex: 6, endIndex: 15, name: "Calle Real" },
    { startIndex: 16, endIndex: 25, name: "Calle Dolores Torres" },
    { startIndex: 26, endIndex: 40, name: "Plaza Fuente Nueva" },
    { startIndex: 41, endIndex: 50, name: "Calle La Villa" },
    // Añadir más segmentos según sea necesario
  ];
  
  function initMap() {
    // Verificar si hay datos de ruta
    if (!route || route.length < 2) {
      console.error("No se proporcionó una ruta válida");
      return;
    }

    // Registrar información de los datos para depuración
    console.log(`Ruta cargada: ${route.length} puntos`);
    console.log(`Puntos de interés: ${points.length} marcadores`);
    
    try {
      // Crear mapa base con Leaflet
      map = L.map('map', {
        center: MARTOS_CENTER,
        zoom: 16,
        minZoom: 14,
        maxZoom: 19,
        attributionControl: false  // Esto desactiva el panel de atribución
      });
      
      // Capa base de imágenes satelitales
      L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: false,
        maxZoom: 19
      }).addTo(map);

      // Capa de etiquetas para nombres de calles con mejor contraste y legibilidad
      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_only_labels/{z}/{x}/{y}{r}.png', {
        attribution: false,
        subdomains: 'abcd',
        maxZoom: 19,
        opacity: 1.0,
        className: 'street-labels-layer'
      }).addTo(map);
      
      // Capa para la ruta completa con efecto "ant path"
      routeLayer = L.polyline.antPath(route, {
        color: '#3388ff',
        weight: 5,
        opacity: 0.8,
        delay: 2500,
        dashArray: [10, 20],
        pulseColor: '#FFFFFF',
        paused: false,
        hardwareAccelerated: true
      }).addTo(map);
      
      // Capa para la parte de la ruta ya recorrida (dorada)
      completedRouteLayer = L.polyline([], {
        color: 'gold',
        weight: 6,
        opacity: 0.9,
        className: 'route-glow'
      }).addTo(map);
      
      // Centrar el mapa en la ruta
      map.fitBounds(routeLayer.getBounds(), { padding: [30, 30] });
      
      // Crear el icono del paso procesional
      const pasoColoridoSVG = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 120" width="60" height="72">
          <!-- Base dorada y estructura del trono -->
          <rect x="15" y="90" width="70" height="12" fill="#B8860B" stroke="#8B4513" stroke-width="1"/>
          <rect x="20" y="85" width="60" height="5" fill="#DAA520" stroke="#B8860B" stroke-width="0.5"/>
          
          <!-- Patas ornamentadas -->
          <rect x="20" y="90" width="5" height="12" fill="#8B4513" stroke="#5D2906" stroke-width="0.5" rx="1"/>
          <rect x="75" y="90" width="5" height="12" fill="#8B4513" stroke="#5D2906" stroke-width="0.5" rx="1"/>
          
          <!-- Nivel medio del trono con terciopelo -->
          <rect x="22" y="70" width="56" height="15" fill="#800020" stroke="#4B0010" stroke-width="1"/>
          <!-- Bordes dorados -->
          <rect x="20" y="70" width="60" height="2" fill="#DAA520" stroke="#B8860B" stroke-width="0.5"/>
          <rect x="20" y="83" width="60" height="2" fill="#DAA520" stroke="#B8860B" stroke-width="0.5"/>
          
          <!-- Cruz principal -->
          <rect x="48" y="20" width="4" height="50" fill="#8B4513" stroke="#5D2906" stroke-width="1"/>
          <rect x="35" y="30" width="30" height="4" fill="#8B4513" stroke="#5D2906" stroke-width="1"/>
          
          <!-- Cristo en la cruz (simplificado pero reconocible) -->
          <path d="M50,30 Q48,35 45,40 L50,40 L55,40 Q52,35 50,30" fill="#FFE4C4" stroke="#8B4513" stroke-width="0.5"/>
          <path d="M45,40 L41,55 M55,40 L59,55" stroke="#FFE4C4" stroke-width="2" stroke-linecap="round"/>
          <circle cx="50" cy="27" r="3" fill="#FFE4C4" stroke="#8B4513" stroke-width="0.5"/> <!-- Cabeza -->
          
          <!-- Corona de espinas -->
          <path d="M47,25 Q50,22 53,25" stroke="#8B4513" stroke-width="0.5" fill="none"/>
          
          <!-- Candelabros y velas a los lados -->
          <!-- Izquierdo -->
          <rect x="25" y="60" width="2" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="24.5" y="50" width="3" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="25" y="45" width="2" height="5" fill="#FFF8DC" stroke="#DCDCDC" stroke-width="0.2"/>
          <circle cx="26" cy="44" r="1" fill="#FFFF00" class="light-pulse" opacity="0.9"/>
          
          <!-- Derecho -->
          <rect x="73" y="60" width="2" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="72.5" y="50" width="3" height="10" fill="#B8860B" stroke="#8B4513" stroke-width="0.3"/>
          <rect x="73" y="45" width="2" height="5" fill="#FFF8DC" stroke="#DCDCDC" stroke-width="0.2"/>
          <circle cx="74" cy="44" r="1" fill="#FFFF00" class="light-pulse" opacity="0.9"/>
          
          <!-- Decoraciones florales -->
          <!-- Centro -->
          <ellipse cx="50" cy="65" rx="10" ry="4" fill="#800020" opacity="0.7"/>
          <circle cx="46" cy="64" r="2" fill="#FF0000" opacity="0.9"/>
          <circle cx="50" cy="63" r="2" fill="#FFFFFF" opacity="0.9"/>
          <circle cx="54" cy="64" r="2" fill="#FF0000" opacity="0.9"/>
          
          <!-- Laterales -->
          <!-- Izquierda -->
          <circle cx="32" cy="70" r="3" fill="#A020F0" opacity="0.8"/>
          <circle cx="35" cy="72" r="2.5" fill="#FFFFFF" opacity="0.8"/>
          <circle cx="31" cy="74" r="2" fill="#FF4500" opacity="0.8"/>
          
          <!-- Derecha -->
          <circle cx="68" cy="70" r="3" fill="#A020F0" opacity="0.8"/>
          <circle cx="65" cy="72" r="2.5" fill="#FFFFFF" opacity="0.8"/>
          <circle cx="69" cy="74" r="2" fill="#FF4500" opacity="0.8"/>
          
          <!-- Luces ambientales -->
          <circle cx="25" cy="65" r="2" fill="#FFFF00" opacity="0.3" class="ambient-light"/>
          <circle cx="75" cy="65" r="2" fill="#FFFF00" opacity="0.3" class="ambient-light"/>
          <circle cx="50" cy="58" r="3" fill="#FFFF00" opacity="0.2" class="ambient-light"/>
        </svg>
      `;
      
      // Crear el div icon con el SVG animado
      const tronoIcon = L.divIcon({
        className: 'custom-paso-marker',
        html: `
          <div class="paso-container">
            ${pasoColoridoSVG}
            <div class="paso-shadow"></div>
          </div>
        `,
        iconSize: [60, 72],
        iconAnchor: [30, 45],
        zIndexOffset: 1000
      });
      
      // Crear el marcador en la posición inicial
      animatedMarker = L.marker(route[0], { 
        icon: tronoIcon,
        zIndexOffset: 1000
      }).addTo(map);
      
      // Añadir marcadores de inicio y fin
      L.marker(route[0], {
        icon: createCustomIcon('green', 'Inicio')
      }).addTo(map).bindPopup('<strong>Punto de Inicio</strong>');
      
      L.marker(route[route.length - 1], {
        icon: createCustomIcon('red', 'Fin') 
      }).addTo(map).bindPopup('<strong>Punto Final</strong>');
      
      // Añadir puntos de interés
      if (points && points.length > 0) {
        points.forEach(point => {
          // Determinar si es una plaza u otro punto de interés basado en el título
          const isPlaza = point.title.toLowerCase().includes('plaza');
          
          L.marker(point.position, {
            // Usar el icono adecuado según el tipo
            icon: isPlaza ? createPlazaIcon(point.title) : createIglesiaIcon(point.title)
          }).addTo(map).bindPopup(`
            <strong>${point.title}</strong>
            ${point.description ? `<br>${point.description}` : ''}
          `);
        });
      }
      
      // Configurar eventos para los botones
      document.getElementById('location-btn').addEventListener('click', handleLocationRequest);
      document.getElementById('back-btn').addEventListener('click', () => window.history.back());
      document.getElementById('play-btn').addEventListener('click', toggleAnimation);
      
      
      // Inicializar la visualización en la posición inicial
      updatePosition(0);
      updateCurrentStreet(0);
      // Coger ultima ubicacion
      addLastLocationMarker();
      
    } catch (error) {
      console.error("Error al inicializar el mapa:", error);
    }
	// Añadir al final de initMap() justo antes del } de cierre
	initBottomSheet();
  }

  async function addLastLocationMarker() {
  try {
    const response = await fetch("https://owntracks-api.semanasantatracker.workers.dev/last-location");
    const data = await response.json();
    const { lat, lon, battery } = data;

    const icon = L.divIcon({
      className: 'last-location-marker',
      html: `<div style="
        background: #f87171;
        border: 3px solid white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        box-shadow: 0 0 6px rgba(0,0,0,0.5);
      " title="Última ubicación (batería: ${battery}%)"></div>`,
      iconSize: [18, 18],
      iconAnchor: [9, 9]
    });

    L.marker([lat, lon], { icon })
      .addTo(map)
      .bindPopup(`<strong>Última ubicación conocida</strong><br>Lat: ${lat}<br>Lon: ${lon}<br>Batería: ${battery}%`);
  } catch (err) {
    console.error("Error obteniendo la última ubicación:", err);
  }
}

  
  // Función para iniciar/pausar la animación
  function toggleAnimation() {
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    
    isPaused = !isPaused;
    
    if (isPaused) {
      // Detener animación
      playIcon.classList.remove('hidden');
      pauseIcon.classList.add('hidden');
      cancelAnimationFrame(animationId);
    } else {
      // Iniciar animación
      playIcon.classList.add('hidden');
      pauseIcon.classList.remove('hidden');
      
      // Si ya llegó al final, reiniciar
      if (currentPosition >= route.length - 1) {
        currentPosition = 0;
        completedRouteLayer.setLatLngs([]);
      }
      
      animateRoute();
    }
  }
  
  // Función para animar la ruta
  function animateRoute() {
    if (isPaused) return;
    
    currentPosition += animationSpeed;
    
    if (currentPosition >= route.length - 1) {
      currentPosition = route.length - 1;
      isPaused = true;
      document.getElementById('play-icon').classList.remove('hidden');
      document.getElementById('pause-icon').classList.add('hidden');
    } else {
      animationId = requestAnimationFrame(animateRoute);
    }
    
    updatePosition(currentPosition);
    updateCurrentStreet(currentPosition);
  }
  
  // Función para actualizar la posición en la ruta
  function updatePosition(position) {
    // Verificar si hay datos válidos
    if (!map || !route || route.length < 2 || !completedRouteLayer || !animatedMarker) return;
    
    const currentIndex = Math.floor(position);
    const nextIndex = Math.min(currentIndex + 1, route.length - 1);
    const fraction = position - currentIndex;
    
    // Interpolar entre los dos puntos
    const lat = route[currentIndex][0] + fraction * (route[nextIndex][0] - route[currentIndex][0]);
    const lng = route[currentIndex][1] + fraction * (route[nextIndex][1] - route[currentIndex][1]);
    
    // Actualizar posición del marcador
    animatedMarker.setLatLng([lat, lng]);
    
    // Actualizar la línea recorrida
    const completedPath = route.slice(0, currentIndex + 1).concat([[lat, lng]]);
    completedRouteLayer.setLatLngs(completedPath);
    
    // Centrar en la posición actual
    map.panTo([lat, lng]);
  }
  
  // Función para actualizar el nombre de la calle actual
  function updateCurrentStreet(position) {
    const currentIndex = Math.floor(position);
    let streetName = "Recorrido procesional";
    
    // Buscar en qué segmento de calle estamos
    for (const segment of streetSegments) {
      if (currentIndex >= segment.startIndex && currentIndex <= segment.endIndex) {
        streetName = segment.name;
        break;
      }
    }
    
    // Actualizar el texto de la calle actual
    document.getElementById('current-street').textContent = streetName;
  }
  
  // Función para crear iconos personalizados
  function createCustomIcon(color, title) {
    return L.divIcon({
      className: 'custom-marker',
      html: `<div style="background-color: ${color}; width: 14px; height: 14px; border-radius: 50%; border: 3px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.8);"></div>`,
      iconSize: [20, 20],
      iconAnchor: [10, 10],
      popupAnchor: [0, -10]
    });
  }
  
  // Función para crear iconos de iglesias y templos
function createIglesiaIcon(title) {
  // SVG de una iglesia con efectos 3D avanzados, sombras y detalles arquitectónicos
  const iglesiaSVG = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 120" width="40" height="48" filter="drop-shadow(0 4px 6px rgba(0,0,0,0.5))">
      <!-- Definición de gradientes para efectos 3D -->
      <defs>
        <linearGradient id="wallGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stop-color="#f5f2eb" />
          <stop offset="100%" stop-color="#d5cdc0" />
        </linearGradient>
        <linearGradient id="roofGradient" x1="0%" y1="0%" x2="80%" y2="100%">
          <stop offset="0%" stop-color="#a83232" />
          <stop offset="100%" stop-color="#651c1c" />
        </linearGradient>
        <linearGradient id="doorGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stop-color="#704214" />
          <stop offset="100%" stop-color="#4b2809" />
        </linearGradient>
        <linearGradient id="windowGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stop-color="#88c9ff" />
          <stop offset="100%" stop-color="#1a6caa" />
        </linearGradient>
        <radialGradient id="stainedGlassGradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
          <stop offset="0%" stop-color="#ffea8a" stop-opacity="0.7" />
          <stop offset="80%" stop-color="#5c94d6" stop-opacity="0.9" />
        </radialGradient>
        <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
          <feGaussianBlur in="SourceAlpha" stdDeviation="2" />
          <feOffset dx="2" dy="2" result="offsetblur" />
          <feComponentTransfer>
            <feFuncA type="linear" slope="0.5" />
          </feComponentTransfer>
          <feMerge>
            <feMergeNode />
            <feMergeNode in="SourceGraphic" />
          </feMerge>
        </filter>
      </defs>
      
      <!-- Terreno/Base -->
      <ellipse cx="50" cy="105" rx="30" ry="6" fill="#7a6c5a" opacity="0.6" />
      
      <!-- Cuerpo principal de la iglesia -->
      <polygon points="15,60 15,100 85,100 85,60" fill="url(#wallGradient)" stroke="#444" stroke-width="0.5" filter="url(#shadow)" />
      
      <!-- Fachada frontal con detalles -->
      <path d="M15,60 v40 h70 v-40 z" fill="url(#wallGradient)" stroke="#444" stroke-width="0.4" />
      <path d="M20,65 h60 M20,75 h60 M20,85 h60 M20,95 h60" stroke="#d8d0c5" stroke-width="0.3" opacity="0.7" />
      
      <!-- Escalones -->
      <path d="M35,100 v-1 h30 v1 z M33,101 v-1 h34 v1 z M31,102 v-1 h38 v1 z" fill="#c0b8a8" stroke="#888" stroke-width="0.1" />
      
      <!-- Puerta principal con arco y detalles -->
      <path d="M40,75 v25 h20 v-25 q-10,-7 -20,0 z" fill="url(#doorGradient)" stroke="#3a2a1a" stroke-width="0.5" filter="url(#shadow)" />
      <path d="M40,75 q10,-7 20,0" fill="none" stroke="#5d3d22" stroke-width="1" />
      <path d="M50,100 v-18" stroke="#5d3d22" stroke-width="0.5" />
      <ellipse cx="47" cy="88" rx="1" ry="1" fill="#d4af37" />
      
      <!-- Ventanas laterales con efecto de vidriera -->
      <g filter="url(#shadow)">
        <path d="M25,70 v15 h8 v-15 q-4,-2 -8,0 z" fill="url(#stainedGlassGradient)" stroke="#444" stroke-width="0.3" />
        <path d="M25,70 q4,-2 8,0" fill="none" stroke="#666" stroke-width="0.5" />
        <path d="M67,70 v15 h8 v-15 q-4,-2 -8,0 z" fill="url(#stainedGlassGradient)" stroke="#444" stroke-width="0.3" />
        <path d="M67,70 q4,-2 8,0" fill="none" stroke="#666" stroke-width="0.5" />
      </g>
      
      <!-- Torre izquierda -->
      <rect x="15" y="30" width="20" height="30" fill="url(#wallGradient)" stroke="#444" stroke-width="0.3" filter="url(#shadow)" />
      <path d="M15,35 h20 M15,40 h20 M15,50 h20" stroke="#d8d0c5" stroke-width="0.4" opacity="0.7" />
      
      <!-- Ventanas de la torre -->
      <path d="M20,42 v10 h10 v-10 q-5,-3 -10,0 z" fill="url(#windowGradient)" stroke="#444" stroke-width="0.2" filter="url(#shadow)" />
      <path d="M20,42 q5,-3 10,0" fill="none" stroke="#666" stroke-width="0.3" />
      
      <!-- Techo de la torre con detalles -->
      <polygon points="10,30 25,10 40,30" fill="url(#roofGradient)" stroke="#444" stroke-width="0.3" filter="url(#shadow)" />
      <line x1="25" y1="10" x2="25" y2="5" stroke="#888" stroke-width="0.5" />
      <path d="M24,5 h2 M24.5,4 v-3" stroke="#E6C700" stroke-width="0.7" />
      
      <!-- Torre principal/centro -->
      <rect x="35" y="20" width="30" height="40" fill="url(#wallGradient)" stroke="#444" stroke-width="0.3" filter="url(#shadow)" />
      <path d="M35,25 h30 M35,35 h30 M35,45 h30" stroke="#d8d0c5" stroke-width="0.4" opacity="0.7" />
      
      <!-- Ventana rosetón central -->
      <circle cx="50" cy="35" r="7" fill="url(#stainedGlassGradient)" stroke="#444" stroke-width="0.3" filter="url(#shadow)" />
      <path d="M50,28 v14 M43,35 h14" stroke="#f0f0f0" stroke-width="0.4" />
      <path d="M45,30 l10,10 M45,40 l10,-10" stroke="#f0f0f0" stroke-width="0.4" />
      <circle cx="50" cy="35" r="2" fill="#ffea8a" opacity="0.9" />
      
      <!-- Techo principal con detalles y acabados -->
      <polygon points="30,20 50,5 70,20" fill="url(#roofGradient)" stroke="#444" stroke-width="0.3" filter="url(#shadow)" />
      <line x1="50" y1="5" x2="50" y2="2" stroke="#888" stroke-width="0.5" />
      
      <!-- Cruz dorada en la cima -->
      <path d="M50,2 v-4 M48,-3 h4" stroke="#E6C700" stroke-width="1" stroke-linecap="round" filter="url(#shadow)" />
    </svg>
  `;
  
  return L.divIcon({
    className: 'iglesia-marker',
    html: `
      <div class="iglesia-container">
        ${iglesiaSVG}
        <div class="marker-title">${title}</div>
      </div>
    `,
    iconSize: [40, 48],
    iconAnchor: [20, 48],
    popupAnchor: [0, -42]
  });
}

// Función para crear iconos de plazas
function createPlazaIcon(title) {
  // URL de la imagen 
  const imageUrl = '/assets/icons/fuente-nueva.png';
  
  return L.divIcon({
    className: 'plaza-marker',
    html: `
      <div class="plaza-container">
        <img src="${imageUrl}" alt="${title}" style="width: 40px; height: 32px; />
        <div class="marker-title">${title}</div>
      </div>
    `,
   /* iconSize: [2, 3],
    iconAnchor: [20, 48],
    popupAnchor: [0, -42]*/
  });
}
  
  // Función para mostrar la ubicación del usuario
  function handleLocationRequest() {
    if (!map) return;
    
    if (!isLocationActive) {
      // Activar
      if ("geolocation" in navigator) {
        // Cambiar estilo del botón para indicar activación
        document.getElementById('location-btn').classList.add('active-btn');
        
        // Intentar obtener ubicación
        navigator.geolocation.getCurrentPosition(
          // Éxito
          function(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;
            
            // Crear icono de ubicación si no existe
            if (!userLocationMarker) {
              // Crear icono personalizado para la ubicación
              const userIcon = L.divIcon({
                className: 'user-location-marker',
                html: `
                  <div class="user-dot">
                    <div class="user-pulse"></div>
                  </div>
                `,
                iconSize: [24, 24],
                iconAnchor: [12, 12]
              });
              
              userLocationMarker = L.marker([userLat, userLng], {
                icon: userIcon,
                zIndexOffset: 2000
              }).addTo(map);
              
              // Añadir popup
              userLocationMarker.bindPopup('¡Estás aquí!').openPopup();
            } else {
              // Actualizar posición
              userLocationMarker.setLatLng([userLat, userLng]);
              userLocationMarker.openPopup();
            }
            
            // Centrar mapa en la ubicación
            map.flyTo([userLat, userLng], 17);
            isLocationActive = true;
          },
          // Error
          function(error) {
            let errorMsg;
            switch(error.code) {
              case error.PERMISSION_DENIED:
                errorMsg = "Necesitas permitir el acceso a tu ubicación para usar esta función.";
                break;
              case error.POSITION_UNAVAILABLE:
                errorMsg = "No se puede determinar tu ubicación actual.";
                break;
              case error.TIMEOUT:
                errorMsg = "Se agotó el tiempo para obtener tu ubicación.";
                break;
              default:
                errorMsg = "Ocurrió un error al intentar obtener tu ubicación.";
            }
            
            alert(errorMsg);
            
            // Restaurar estilo del botón
            document.getElementById('location-btn').classList.remove('active-btn');
          },
          // Opciones
          {
            enableHighAccuracy: true,
            timeout: 5000,
            maximumAge: 0
          }
        );
      } else {
        alert("Tu navegador no soporta geolocalización");
      }
    } else {
      // Desactivar
      if (userLocationMarker) {
        userLocationMarker.closePopup();
        map.removeLayer(userLocationMarker);
        userLocationMarker = null;
      }
      
      document.getElementById('location-btn').classList.remove('active-btn');
      isLocationActive = false;
    }
  }
  // Inicializar el manejo del bottom sheet
  function initBottomSheet() {
    const bottomSheet = document.getElementById('street-info-container');
    bottomSheetHeight = bottomSheet.offsetHeight;
    
    // Añadir botón para mostrar panel si está oculto
    const mapContainer = document.querySelector('.map-container');
    const showButton = document.createElement('button');
    showButton.id = 'show-bottom-sheet';
    showButton.innerHTML = '↑';
    showButton.className = 'show-bottom-btn hidden';
    showButton.addEventListener('click', showBottomSheet);
    mapContainer.appendChild(showButton);
    
    // Solo activar para móviles
    if (window.innerWidth <= 768) {
      // Evento para iniciar el arrastre
      bottomSheet.addEventListener('touchstart', function(e) {
        touchStartY = e.touches[0].clientY;
        bottomSheet.style.transition = 'none';
      }, { passive: true });

      // Evento para el arrastre
      bottomSheet.addEventListener('touchmove', function(e) {
        touchCurrentY = e.touches[0].clientY;
        const deltaY = touchCurrentY - touchStartY;
        
        // Permitir arrastres en ambas direcciones
        const newHeight = Math.max(0, Math.min(window.innerHeight * 0.8, bottomSheetHeight - deltaY));
        bottomSheet.style.height = `${newHeight}px`;
        
        // Si el arrastre es grande hacia abajo, permitir ocultarlo completamente
        if (deltaY > bottomSheetHeight/2) {
          bottomSheet.style.transform = `translateY(${deltaY}px)`;
        } else {
          bottomSheet.style.transform = `translateY(${Math.max(0, deltaY)}px)`;
        }
      }, { passive: true });

      // Evento para finalizar el arrastre
      bottomSheet.addEventListener('touchend', function() {
        bottomSheet.style.transition = 'transform 0.3s ease, height 0.3s ease';
        
        // Si arrastró hacia arriba lo suficiente, expandir
        if (touchCurrentY < touchStartY - 50 && bottomSheetState === 'collapsed') {
          expandBottomSheet();
        } 
        // Si arrastró hacia abajo lo suficiente desde estado colapsado, ocultar
        else if (touchCurrentY > touchStartY + 100 && bottomSheetState === 'collapsed') {
          hideBottomSheet();
        }
        // Si arrastró hacia abajo desde estado expandido, colapsar
        else if (touchCurrentY > touchStartY + 50 && bottomSheetState === 'expanded') {
          collapseBottomSheet();
        } 
        // Volver al estado inicial
        else {
          bottomSheet.style.transform = '';
          bottomSheet.style.height = '';
        }
      }, { passive: true });

	  bottomSheet.addEventListener('touchend', function() {
  bottomSheet.style.transition = 'transform 0.3s ease, height 0.3s ease';
  
  // Si arrastró hacia arriba lo suficiente, expandir
  if (touchCurrentY < touchStartY - 50 && (bottomSheetState === 'collapsed' || bottomSheetState === 'peeking')) {
    expandBottomSheet();
  } 
  // Si arrastró hacia abajo lo suficiente desde estado colapsado, mostrar solo tirador
  else if (touchCurrentY > touchStartY + 100 && bottomSheetState === 'collapsed') {
    hideBottomSheet();
  }
  // Si arrastró hacia abajo desde estado expandido, colapsar
  else if (touchCurrentY > touchStartY + 50 && bottomSheetState === 'expanded') {
    collapseBottomSheet();
  }
  // Si estamos en estado peeking y hay un toque en el tirador, mostrar
  else if (bottomSheetState === 'peeking') {
    showBottomSheet();
  }
  // Volver al estado inicial
  else {
    bottomSheet.style.transform = '';
    bottomSheet.style.height = '';
  }
}, { passive: true });
      // Evento click en el indicador de arrastre
      document.querySelector('.drag-handle').addEventListener('click', function() {
        if (bottomSheetState === 'collapsed') {
          expandBottomSheet();
        } else if (bottomSheetState === 'expanded') {
          collapseBottomSheet();
        }
      });
      
      // Doble toque para ocultar
    //   document.querySelector('.drag-handle').addEventListener('dblclick', hideBottomSheet);
    }
  }

  function expandBottomSheet() {
    const bottomSheet = document.getElementById('street-info-container');
    bottomSheet.style.height = '80vh';
    bottomSheet.style.transform = 'translateY(0)';
    bottomSheet.classList.add('expanded');
    bottomSheetState = 'expanded';
  }

  function collapseBottomSheet() {
    const bottomSheet = document.getElementById('street-info-container');
    bottomSheet.style.height = '';
    bottomSheet.style.transform = '';
    bottomSheet.classList.remove('expanded');
    bottomSheetState = 'collapsed';
  }
  
  function hideBottomSheet() {
  const bottomSheet = document.getElementById('street-info-container');
  
  // En lugar de ocultar completamente, dejamos asomar la parte del tirador (aproximadamente 20px)
  bottomSheet.style.transform = 'translateY(calc(100% - 20px))';
  bottomSheetState = 'peeking'; // Nuevo estado que indica que está casi oculto pero con el tirador visible
  
  // Añadimos una clase visual para resaltar el tirador
  bottomSheet.classList.add('peeking');
  bottomSheet.classList.remove('expanded');
}
  
  
function showBottomSheet() {
  const bottomSheet = document.getElementById('street-info-container');
  bottomSheet.style.transform = '';
  bottomSheetState = 'collapsed';
  
  // Quitar la clase peeking
  bottomSheet.classList.remove('peeking');
  
  // Eliminar el botón si existe
  const showButton = document.getElementById('show-bottom-sheet');
  if (showButton) {
    showButton.remove();
  }
}
</script>

<style>
  /* Mejoras para las etiquetas de calles al estilo Google Maps */
  :global(.street-labels-layer) {
    filter: brightness(0.8) contrast(1.8) saturate(1.2) !important;
    opacity: 1 !important;
    mix-blend-mode: normal;
  }

  /* Estilo para etiquetas de calles */
  :global(.leaflet-tile-loaded) {
    font-family: 'Roboto', 'Arial', sans-serif;
    font-weight: 900;
    font-size: 1.1em;
    -webkit-text-stroke: 0.2px black;
  }

  /* Mejoras para los nombres de calles */
  :global(.leaflet-tile-pane text),
  :global(.leaflet-tile-container path) {
    fill: #000000 !important;
    stroke: none !important;
    paint-order: normal;
    text-shadow: 0px 0px 2px rgba(255,255,255,0.5);
  }

  /* Para mayor contraste en áreas oscuras */
  :global(.leaflet-tile-container img) {
    filter: brightness(1.05) !important;
  }

  /* Estilos para asegurar que el mapa ocupe toda la pantalla */
  :global(body), :global(html) {
    margin: 0;
    padding: 0;
    height: 100%;
    overflow: hidden;
  }
  
  /* Personalizar los popups */
  :global(.leaflet-popup-content-wrapper) {
    border-radius: 8px;
  }
  
  :global(.leaflet-popup-content) {
    margin: 12px;
  }
  
  /* Estilos para el paso procesional */
  :global(.paso-container) {
    position: relative;
    animation: paso-motion 1.5s infinite alternate ease-in-out;
    z-index: 1000;
    transform: translateY(-20px);
  }
  
  :global(.paso-shadow) {
    position: absolute;
    bottom: -4px;
    left: 25%;
    width: 50%;
    height: 6px;
    background: rgba(0,0,0,0.3);
    border-radius: 50%;
    z-index: -1;
  }
  
  /* Animación del movimiento lateral del paso */
  @keyframes paso-motion {
    0% { transform: translate(-2px, -20px) rotate(-1deg); }
    50% { transform: translate(0, -21px); }
    100% { transform: translate(2px, -20px) rotate(1deg); }
  }
  
  /* Animación de las luces del paso */
  :global(.light-pulse) {
    animation: light-pulse 2s infinite alternate;
  }
  
  @keyframes light-pulse {
    0% { opacity: 0.4; r: 1.8; }
    50% { opacity: 0.8; r: 2.2; }
    100% { opacity: 1; r: 2.5; }
  }
  
  /* Animación para las luces ambientales */
  :global(.ambient-light) {
    animation: glow 3s infinite alternate ease-in-out;
  }

  @keyframes glow {
    0% { opacity: 0.2; r: 2; }
    100% { opacity: 0.4; r: 2.5; }
  }
  
  /* Efecto de brillo para la ruta */
  :global(.route-glow) {
    filter: drop-shadow(0 0 3px gold);
  }

  /* Estilos para los iconos de iglesias */
  :global(.iglesia-container) {
    position: relative;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.5));
    transition: transform 0.2s ease;
  }

  :global(.iglesia-container:hover) {
    transform: translateY(-3px);
    filter: drop-shadow(0 4px 8px rgba(0,0,0,0.7));
  }

  :global(.marker-title) {
    position: absolute;
    bottom: -22px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    background-color: rgba(0,0,0,0.7);
    color: white;
    font-size: 11px;
    padding: 3px 6px;
    border-radius: 3px;
    visibility: hidden;
    box-shadow: 0 1px 3px rgba(0,0,0,0.3);
  }

  :global(.iglesia-container:hover .marker-title),
  :global(.plaza-container:hover .marker-title) {
    visibility: visible;
  }
  
  /* Mejoras para botones en móvil y ordenador */
  :global(.leaflet-control-zoom) {
    margin-bottom: 140px !important; /* Para evitar solapamiento con los controles */
  }

  @media (max-width: 640px) {
      :global(.leaflet-control-zoom) {
          display: none !important;
      }
    
      :global(.leaflet-control-attribution) {
          display: none !important;
      }
  }

  /* Estilos para el marcador de ubicación del usuario */
  :global(.user-location-marker) {
    background: transparent;
    border: none;
  }

  :global(.user-dot) {
    position: relative;
    width: 24px;
    height: 24px;
  }

  :global(.user-dot::before) {
    content: '';
    position: absolute;
    top: 8px;
    left: 8px;
    width: 8px;
    height: 8px;
    background-color: #3b82f6;
    border-radius: 50%;
    box-shadow: 0 0 0 2px white;
    z-index: 10;
  }

  :global(.user-pulse) {
    position: absolute;
    top: 0;
    left: 0;
    width: 24px;
    height: 24px;
    background-color: rgba(59, 130, 246, 0.4);
    border-radius: 50%;
    opacity: 1;
    animation: pulse 2s infinite ease-out;
  }

  @keyframes pulse {
    0% { transform: scale(0.5); opacity: 1; }
    100% { transform: scale(2); opacity: 0; }
  }

  /* Estilos para los iconos de plaza */
  :global(.plaza-container) {
    position: relative;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.5));
    transition: transform 0.2s ease;
  }

  :global(.plaza-container:hover) {
    transform: translateY(-3px);
    filter: drop-shadow(0 4px 8px rgba(0,0,0,0.7));
  }

  :global(.water-drop) {
    animation: water-pulse 2s infinite alternate ease-in-out;
  }

  @keyframes water-pulse {
    0% { opacity: 0.4; r: 0.8; }
    100% { opacity: 0.9; r: 1.5; }
  }

  /* Estilos mejorados para el título */
  .title-container {
    position: absolute;
    z-index: 20;
    padding: 0.75rem 1rem;
    background: linear-gradient(to right, rgba(0,0,0,0.7), rgba(0,0,0,0.8));
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    top: 1rem;
    right: 1rem;
    max-width: 80%;
    backdrop-filter: blur(2px);
    border-left: 3px solid black;
    transition: all 0.3s ease;
  }

  .title-text {
    font-size: 1.25rem;
    font-weight: bold;
    color: white;
    margin: 0;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Estilo Bottom Sheet para el panel inferior */
.bottom-sheet-container {
  position: absolute;
  z-index: 50;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(17, 24, 39, 0.85); /* Color oscuro semi-transparente */
  backdrop-filter: blur(10px);
  padding: 1rem 1.5rem 1.5rem;
  border-top-left-radius: 16px;
  border-top-right-radius: 16px;
  box-shadow: 0 -4px 15px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.25rem;
  transition: transform 0.3s ease-in-out, height 0.3s ease-in-out;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
}

/* Añade estilos para el estado expandido */
.bottom-sheet-container.expanded {
  overflow-y: auto;
  height: 80vh !important;
}

/* Indicador de arrastre (handle) */
.drag-handle {
  width: 100%;
  padding-bottom: 0.5rem;
  display: flex;
  justify-content: center;
  cursor: grab;
}

.drag-indicator {
  width: 40px;
  height: 5px;
  background-color: rgba(255, 255, 255, 0.5);
  border-radius: 2.5px;
}



/* Comportamiento en escritorio */
/* Comportamiento en escritorio - Mejor centrado y bordes redondeados */
@media (min-width: 769px) {
    .bottom-sheet-container {
      max-height: unset;
      height: auto;
      border-radius: 10px !important; /* Aumentado para que sea más visible */
      max-width: 500px;
      margin: 0 auto;
      left: 0;
      right: 0; /* Esto ayuda al centrado automático */
      transform: none; /* Quitamos el transform que podría estar causando problemas */
      background-color: rgba(17, 24, 39, 0.8);
      bottom: 1rem;
      width: 90%;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.5); /* Añadido para mejor apariencia */
      border: 1px solid rgba(255, 255, 255, 0.1); /* Borde sutil para mejorar visibilidad */
    }
    
    .drag-handle {
      display: none;
    }
    
    .bottom-sheet-container.expanded {
      height: auto !important;
    }
  }

  /* Estilo para el texto de la calle */
  .current-street-text {
    font-size: 1.25rem;
    font-weight: 600;
    color: white;
    margin: 0;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    text-align: center;
  }

  /* Contenedor de botones para bottom sheet */
  .buttons-container {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: 300px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  /* Estilos para los botones en el bottom sheet */
  .control-btn {
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 52px;
    height: 52px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    transition: all 0.2s ease;
  }

  .control-btn:hover {
    background-color: rgba(255, 255, 255, 1);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
  }

  .control-btn:active {
    transform: translateY(0);
    background-color: rgba(235, 235, 235, 1);
  }

  .control-btn svg {
    stroke: #333;
    width: 28px;
    height: 28px;
  }

  .active-btn {
    background-color: #3b82f6 !important;
  }

  .active-btn svg {
    stroke: white !important;
  }

  /* Adaptar título en dispositivos móviles */
  @media (max-width: 640px) {
    .title-container {
      left: 50%;
      right: auto;
      transform: translateX(-50%);
      text-align: center;
      width: 90%;
      max-width: 90%;
      background: rgba(0,0,0,0.75);
      padding: 0.5rem 0.75rem;
      border-left: none;
      border-bottom: 2px solid black;
    }
    
    .title-text {
      font-size: 1.1rem;
      white-space: normal;
      line-height: 1.3;
    }

    .bottom-sheet-container {
      padding: 0.75rem 1rem 1.25rem;
    }

    .control-btn {
      width: 46px;
      height: 46px;
    }
  }
  .show-bottom-btn {
  position: fixed; /* Cambiado de absolute a fixed para asegurar que siempre sea visible */
  bottom: 20px; /* Un poco más alto */
  left: 50%;
  transform: translateX(-50%);
  width: 50px; /* Más grande */
  height: 50px; /* Más grande */
  border-radius: 50%;
  background-color: #3b82f6; /* Azul brillante */
  color: white;
  font-size: 24px; /* Más grande */
  border: 2px solid white; /* Borde blanco para mejor contraste */
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 3px 10px rgba(0,0,0,0.7); /* Sombra más pronunciada */
  z-index: 9999; /* Z-index muy alto para asegurar que esté por encima de todo */
  cursor: pointer;
  animation: pulse-button 2s infinite alternate; /* Animación para hacerlo más visible */
}

@keyframes pulse-button {
  0% { transform: translateX(-50%) scale(1); }
  100% { transform: translateX(-50%) scale(1.1); }
}
  
  .hidden {
    display: none !important;
  }
</style>
</div>